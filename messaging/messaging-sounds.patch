This patch modifies the messaging app to play a specified
tone (rather than the default alerts tone) when a new message
is received.  If none is specified, it will play the default
tone. This patch should be used in conjunction with either
message-tone-sounds-and-alerts.patch or with the
MyNotifications homebrew application.
Index: /usr/palm/applications/com.palm.app.messaging/app/controllers/notification-assistant.js
===================================================================
--- .orig/usr/palm/applications/com.palm.app.messaging/app/controllers/notification-assistant.js
+++ /usr/palm/applications/com.palm.app.messaging/app/controllers/notification-assistant.js
@@ -53,6 +53,19 @@ NotificationAssistant.prototype.sendNoti
 	}
 };
 
+NotificationAssistant.prototype.doBanner = function(bannerParams,bannerLaunchParams,bannerType,payload) {
+	if (payload.messagetone.fullPath)
+		bannerParams.soundFile = payload.messagetone.fullPath;
+	this.controller.showBanner(bannerParams,bannerLaunchParams,bannerType);
+};
+
+NotificationAssistant.prototype.playMessagetone = function(payload){
+	if (payload.messagetone.fullPath)
+		this.controller.playSoundNotification('alerts',payload.messagetone.fullPath);
+	else
+		this.controller.playSoundNotification('alerts','');
+};
+
 /*
  * <ReminderCode>
  */
@@ -142,7 +155,7 @@ NotificationAssistant.prototype.consider
 	
 	// check if we should only play a sound (when you are already in a chat & a new message comes in)
 	if(notificationData.get('playSoundOnly') && this.Messaging.messagingPrefs.enableNotificationSound) {
-		this.controller.playSoundNotification('alerts','');
+		MessagingMojoService.getMessagetone(this.playMessagetone.bind(this));
 		return; // don't display any visual notification
 	}	
 	
@@ -178,10 +191,10 @@ NotificationAssistant.prototype.sendClas
 
 	notificationData.set('alertTitle',alertTitle);
 	this.class0AlertData.list.push(notificationData);
-	this.renderClass0PopupAlert(true);
+	MessagingMojoService.getMessagetone(this.renderClass0PopupAlert.bind(this,true));
 };
 
-NotificationAssistant.prototype.renderClass0PopupAlert = function(playSound) {
+NotificationAssistant.prototype.renderClass0PopupAlert = function(playSound,messageTone) {
 	var class0Stage = this.controller.getStageController(Class0AlertStageName);
 
 	if(class0Stage) {
@@ -190,6 +203,8 @@ NotificationAssistant.prototype.renderCl
 		var soundClass = 'none';
 		if(playSound) {
 			soundClass = 'alerts';
+			if(messageTone)
+				soundFile = messageTone;
 		}		
 		
 		var pushClass0AlertScene = function(stageController) {
@@ -200,7 +215,8 @@ NotificationAssistant.prototype.renderCl
 			name: Class0AlertStageName,
 			lightweight: true,
 			height: 300,
-			soundclass: soundClass
+			soundclass: soundClass,
+			soundfile: soundFile
 		}, pushClass0AlertScene, 'popupalert');		
 	}
 	
@@ -252,8 +268,6 @@ NotificationAssistant.prototype.sendNewM
 	var bannerParams = {
 		messageText: notificationText
 	};
-	if (this.Messaging.messagingPrefs.enableNotificationSound)
-		bannerParams.soundClass = "alerts";
 	var bannerLaunchParams =  {
 		chatThreadId: notificationData.get('chatThreadId'),
 		clearBanner: true		
@@ -261,10 +275,14 @@ NotificationAssistant.prototype.sendNewM
 	
 	if (this.Messaging.DisplayState.isDisplayOn()) {
 		Mojo.Log.info("notificationAssistant - executing full banner notification");	
-		this.controller.showBanner(bannerParams, bannerLaunchParams, 'chat');		
+		if (this.Messaging.messagingPrefs.enableNotificationSound) {
+			bannerParams.soundClass = "alerts";
+			MessagingMojoService.getMessagetone(this.doBanner.bind(this,bannerParams,bannerLaunchParams,'chat'));
+		} else
+			this.controller.showBanner(bannerParams, bannerLaunchParams, 'chat');		
 	} else if (this.Messaging.messagingPrefs.enableNotificationSound) {
 		Mojo.Log.info("notificationAssistant - playing sound notification only");
-		this.controller.playSoundNotification('alerts','');
+		MessagingMojoService.getMessagetone(this.playMessagetone.bind(this));
 	}
 	
 	// Store the data so it can be used in the dashboard
@@ -314,14 +332,9 @@ NotificationAssistant.prototype.sendNewM
 		// delay creating the dashboard window for the case where the banner is clicked on
 		// to take you to the chat view.  This will likely result in the dashboard data
 		// being cleared.  If the dashboard data is empty, we do not need to create the dashboard.		
-		if (this.Messaging.DisplayState.isDisplayOn()) {
-			if (!this.isNewMessageDashboardPending) {
-				this.isNewMessageDashboardPending = true; 
-				createDashboard.delay(5);
-			}
-			
-		} else {
-			createDashboard(); // if the screen is off, create the dashboard right away
+		if (!this.isNewMessageDashboardPending) {
+			this.isNewMessageDashboardPending = true; 
+			createDashboard.delay(5);
 		}
 	}
 };
Index: /usr/palm/applications/com.palm.app.messaging/app/models/messaging-luna-service.js
===================================================================
--- .orig/usr/palm/applications/com.palm.app.messaging/app/models/messaging-luna-service.js
+++ /usr/palm/applications/com.palm.app.messaging/app/models/messaging-luna-service.js
@@ -9,6 +9,16 @@ var MessagingMojoService = {
   telephonyIdentifier: 'palm://com.palm.telephony',
   systemManagerIdentifier: 'palm://com.palm.systemmanager',
 
+  getMessagetone:  function(callback) {
+  	var request = new Mojo.Service.Request('palm://com.palm.systemservice', {
+  		method: 'getPreferences',
+  		parameters: {"keys":["messagetone"]},
+  		onSuccess: callback,
+  		onFailure: callback
+  	});
+  	return request;
+  },
+  
   launchMessaging: function(sceneController,params) {  
 	return sceneController.serviceRequest("palm://com.palm.applicationManager", {
 		method:'launch',
